abort	stdlib.h, process.h	void abort(void)	프로그램을 종료하되 비정상적으로 종료한다.
abs	math.h, stdlib.h	int abs(int x)	정수 x의 절대값을 계산한다.
absread	dos.h	int absread(int drive, int nsects, long lsect, void *buffer)	디스크의 특정 섹터를 읽는다. 한번에 최대 64K를 초과할수 없다.
abswrite	dos.h	int absread(int drive, int nsects, long lsect, void *buffer)	디스크의 특정 섹터에 기록한다. 한번에 최대 64K를 초과할수 없다.
access	io.h	int access(const char (filename, int amode)	파일의 존재여부와 읽고 쓸 수 있는지에 대해 조사한다.
acos	math.h	double acos(double x)	아크 코사인 값을 계산한다.
allocmem	dos.h	int allocmem(unsigned size, unsigned *segp)	도스 펑션 콜의 48h를 호출하여 메모리를 할당받는다.
arc	graphics.h	void far arc(int x, int y, int stangle, int endangle, int ratius)	원호를 그려준다.
arg	complex.h	double arg(complex x)	복소수 평면에서 주어진 수의 각도를 알아낸다.
asctime	time.h	char *asctime(const struct tm *tblock)	tm형 구조체에 저장되어 있는 시간, 날짜에 관한 정보를 문자열로 바꾼다.
asin	math.h	double asin(double x)	아크 사인 값을 계산한다.
assert	assert.h	void assert(int test)	인수로 전달되는 test가 0이면 프로그램을 종료한다.
atan	math.h	double atan(double x)	아크 탄젠트값을 계산한다.
atan2	math.h	double atan2(double y, double x)	atan(y/x)와 동일한 기능을 수행하는 함수이다. 단 x가 0에 가까운 값을때 atan보다 정확하다.
atexit	stdlib.h	int atexit(atexit_t func)	프로그램은 main 함수가 끝나거나 exit 함수에 의해 강제로 종료되면 상위 프로세서로 복귀한다.
atof	math.h, stdlib.h	double atof(const char*s)	문자열을 double형 부동소수점으로 바꾼다.
atoi	stdlib.h	int atoi(const char*s)	문자열을 정수로 변환한다.
atol	stdlib.h	int atol(const char*s)	문자열을 long형 정수로 변환한다.
bar	graphics.h	void far bar(int left, int right, int bottom)	좌상단 좌표에서 우상단을 대각선으로 하는 직사각형을 그린다.
bar3d	graphics.h	void far bar3d(int left, int right, int bottom, int depth, int topflag)	3차원의 사각형 바를 그린다. 좌상단에서 우하단을 대각선으로 하는 직사각형모양
bdos	dos.h	int bdos(int dosfun, unsigned dosdx, unsigned dosal)	도스 펑션 콜을 직적 호출한다.
bdosptr	dos.h	int bdosptr(int dosfun, void*argument, unsigned dosal)	도스 펑션 콜을 직적 호출한다.
bioscom	bios.h	int bioscom(int cmd, char abyte, int port)	RS232C 통신을 수행하며 BIOS 인터럽트 0x14번을 사용한다.
biosdisk	bios.h	int biosdisk(int cmd, int drive, int head, int track, int sector, int nsects, void *buffer)	직접적으로 디스크 입출력동작을 하며, BIOS 인터럽트의 0x13번을 사용한다.
biosequip	bios.h	int biosequip(void)	시스템에 설치된 장비의 개수 및 종류를 알아낸다.
bioskey	bios.h	int bioskey(int cmd)	BIOS 인터럽트 0x16을 사용하여 키보드 입출력을 수행한다.
biosmemory	bios.h	int biosmemory(void)	BIOS 인터럽트 0x12를 사용하여 램의 크기를 조사한다.
biosprint	bios.h	int biosprint(int cmd, int abyte, int port)	프린트 출력 작업을 행하되 BIOS 인터럽트  0x17을 사용한다.
biostime	bios.h	long biostime(int cmd, long nowtime)	BIOS 인터럽트 0x1a를 호출하여 타이머를 읽거나 설정한다.
brk	alloc.h	int brk(void *addr)	이 함수를 호출한 프로그램의 heep 크기를 바꾼다.
bsearch	stdlib.h	void bsearch(const void *key, const void *base, size_t nelem, size_t width, int (*fcmp)(const void*, const void*))	항목들을 담고 있는 테이블(보통 배열)을 뒤져 키값을 찾아내고 그 번지를 리턴한다.
cabs	math.h	double cabs(struct complex z)	복소수의 절대값을 구한다.
calloc	alloc.h, stdlib.h	void *calloc(size_t nitems, size_t size)	동적으로 메모리를 할당한다. 할당된 메모리의 크기는 nitems* size 바이트만큼이다.
ceil	math.h	double ceil(double x)	인수 x를 올림한다. 인수 x의 수직선상에 우측으로 가장 가까운 정수를 찾아내는 함수이다.
cgets	conio.h	char*cgets(char*str)	콘솔로부터 문자열을 입력받아 문자 배열 str에 저장한다.
chdir	dir.h	int chdir(const char*path)	디렉토리를 변경한다. Path에는 변경할 디렉토리명을 적어주고 드라이브명도 포함가능하다.
chmod	io.h	int chmod(const char*path, int amode)	파일 액세스 모드를 변경시킨다.
chsize	io.h	int chsize(int handle, long size)	핸들이 지정하는 파일의 크기를 size로 재설정한다.
circle	graphics.h	void far circle(int x, int radius)	중심(x, y)에서 반지름이 radius인 원을 그린다.
cleardevice	graphics.h	void far cleardevice(void)	그래픽 화면을 지운다. 화면 전체를 배경색으로 덮으며 지정색이 없을 경우 기본값은 검정색이다.
clearerr	stdio.h	void clearerr(FILE *stream)	FILE 구조체의 flags 멤버 제4비트와 제5비트를 리셋시킨다.
clearviewport	graphics.h	void far clearviewport(void)	현재 설정된 뷰포트를 지운다. 내부를 배경색으로 채운다.
clock	time.h	clock_t cloch(void)	프로그램이 시작된 후 경과한 clock tick을 리턴한다.
close	io.h	int close(int handle)	핸들이 지시하는 파일을 닫는다.
closegraph	graphics.h	void far closegraph(void)	그래픽 시스템을 종료하고 텍스트 화면으로 돌아온다.
clreol	conio.h	void clreol(void)	현재 커서 위치에서부터 그 줄의 끝까지를 삭제한다. 삭제 후 커서이동은 없다.
clrscr	conio.h	void clrscr(void)	텍스트 화면을 지우고 커서를 좌상단의 위치로 옮긴다. 그래픽 모드에선 사용할 수 없다.
complex	complex.h	complex complex(double real, double imag)	주어진 실수와 허수를 이용하여 복소수를 만든다.
conj	complex.h	complex conj(complex x)	켤레 복소수를 구한다.
coreleft	alloc.h	unsigned long coreleft(void)	사용 가능한 남은 메모리 용량을 조사한다. 메모리 모델에 따라 측정값이 달라진다.
cos	math.h	double cos(double x)	삼각 함수 cos을 계산한다.
cosh	math.h	double cosh(double x)	쌍곡선  cosh 함수값을 계산한다.
country	dos.h	struct country*country(int xcode, struct country *cp)	날짜, 시간 표현 방법, 화폐 단위 등의 국가마다 다른 정보를 country 구조체에 세트한다.
cprintf	conio.h	int cprintf(const char*format, 인수…)	사용 방법, 서식의 종류가 printf와 동일하다.
cputs	conio.h	int cputs(const char *str)	문자열을 화면으로 출력한다.
creat	io.h, dos.h	int creat(const char*path, int amode)	새로운 파일을 만든다.
creatnew	io.h	int creatnew(const char*path, int attrib)	새로 파일을 만든다. 단 새로 만들 파일이 이미 존재하는 경우에는 에러가 되며 그대로 리턴한다.
creattemp	io.h	int creattemp(char*path, int attrib)	임시 파일을 지정한 디텍토리에 생성한다. 파일 이름은 고유한 이름을 가진다.
cscanf	conio.h	int cscanf(char*format, 인수 …)	콘솔로부터 직접 입력을 받는다. scanf와 비슷하나 다른점은 입력을 화면으로부터 직접 받아들인다.
ctime	time.h	char*ctime(const time_t*time)	time값이 가리키는 시간과 날짜를 문자열로 바꾼다.
ctrlbrk	dos.h	void ctlbrk(int (*handle)(void))	Ctrl-Break에 대한 handler 함수, Ctrl-Break 키가 눌러졌을 때의 처리를 하는 함수를 설정한다.
delay	dos.h	void delay(unsiged miliseconds)	일정 기간동안 시간을 끈다. 게임등에서 속도를 지연시키기 위해 주로 사용한다.
delline	conio.h	void delline(void)	현재 커서 위치의 한 행을 삭제한다. 텍스트 모드에서만 사용가능한 함수이다.
detectgraph	graphics.h	void far datectgraph(int far*graphdriver, int far*graphmode)	현재 시스템에 장착되어 있는 그래픽 드라이버를 찾아주며 제공하는 최고의 고해상도 모드를 찾아준다.
difftime	time.h	double difftime(time_t time2, time_t time1)	time1, time2가 가리키는 시간의 차이를 초 단위로 계산한다.
disable	dos.h	void disable(void)	하드웨어 인터럽트를 금지시킨다.
div	stdlib.h	div_t div(int number, int denom)	두 정수로 나눗셈을 하고 그 몫과 나머지를 stdlib.h에 정의된 div_t 구조체로 리턴한다.
dosexterr	dos.h	int dosexterr(struct DOSERROR*eblkp)	도스 펑션 콜이 실패한 후에 확장된 에러 정보를 읽어와 DOSERROR  구조체에 세트한다.
dostounix	dos.h	long dostounix(struct date*d, struct time*t)	getdate 함수와 gettime 함수에 의해 조사된 날짜와 시간 형식을 유닉스형으로 바꾼다.
drawpoly	graphics.h	void far drawploy(int numpoints, int far*polypoints)	다각형의 외각선을 그린다.
dup	io.h	int dup(int handle)	파일 핸들을 복사하여 새로운 파일핸들을 만든다.
dup2	io.h	int dup2(int oldhandle, int newhandle)	oldhandle을 newhandle로 복사한다.
ecvt	stdlib.h	char*ecvt(double value, int ndig, int*dec, int*sign)	실수값을 문자열로 바꾼다. 변환된 문자열은 정적 데이터 영역에 저장되어져 포인터만 리턴된다.
ellipse	graphics.h	void far ellipse(int x, int y, int stangle, int endangle, int xradius, int yradius)	반지름(x, y)를 중심으로 시작각에서 끝각까지 x,y축 반지름을 지정하여 타원을 그린다.
enable	dos.h	void enable(void)	하드웨어 인터럽트를 가능하게 한다.
eof	io.h	int eof(int handle)	현재 위치가 파일 끝이면 1을 리턴하고 파일 끝이 아니면 0을 리턴한다.
exec	process.h	int execl(char *path, char*arg0,…,NULL)	exec.. 함수는 child 프로그램을 읽어와서 실행시킨다. 현재 프로그램은 종료된다.
exp	math.h	double exp(double x):	이 함수로 넘겨지는 x값에 따라서는 overflow가 발생할 수 있다.
fabs	math.h	double fabs(double x)	부동 소수점의 절대값을 계산한다.
farcalloc	alloc.h	void far*farcalloc(unsigned nunits, unsigned long unitsz)	far heap에서 동적 메모리를 할당한다. 할당되는 메모리의 총 량은 nuints*unitsz 바이트이다.
farcoreleft	alloc.h	unsigned long farcoreleft(void)	far heap의 사용 가능한 메모리 용량을 조사한다.
farfree	alloc.h	void farfree(void far*block)	faralloc, farrealloc, farcalloc 등에 의해 할당된 far heap의 할당을 해제한다.
farmalloc	alloc.h	void far*farrnalloc(unsigned long nbytes)	far heap에서 동적 메모리를 할당한다.
farrealloc	alloc.h	void *farrealloc(void far*oldblock, unsigned long nbytes)	이미 할당되어 있는 메모리의 크기를 축소시키거나 확장시킨다.
fclose	stdio.h	int fclose(FILE *stream)	개방된 스트림을 닫는다. 버퍼가 지워진다.
fcloseall	stdio.h	int fcloseall(void)	열려져 있는 모든 스트림을 폐쇄한다.
fcvt	stdlib.h	char*fcvt(double value, int ndig, int*dec, int*sign)	실수값을 문자열로 바꾼다. 변환된 문자열은 정적 데이터 영역에 저장되어져 포인터만 리턴된다.
fdopen			
feof	stdio.h	int feof(FILE*stream)	FILE 구조체의 flags 멤버의 제5비트의 값을 검사한다.
ferror	stdio.h	int ferror(FILE*stream)	주어진 스트림에서 읽기, 쓰기 동작에서의 에러가 있었는지 검사한다.
fflush	stdio.h	int fflush(FILE*stream)	스트림에 할당되어 있는 버퍼를 비운다. 입력, 출력 상황에 따라 버퍼를 비우는 의미가 다르다.
fgetc	stdio.h	int fgetc(FILE*stream)	스트림으로부터 한 문자를 읽어온다. 문자형 변수에 대입할 경우 에러 검출을 할 수 없다.
fgetchar	stdio.h	int fgetchar(void)	키보드로부터 한 문자를 입력받는다. 단일 문자 입력에 사용하는 것은 좋지 않다.
fgetpos	stdio.h	int fgetpos(FILE*stream, fpos_t*pos)	스트림의 현재 파일 포인터를 조사해 pos변수에 저장한다.
fgets	stdio.h	char *fgets(char*s, int n, FILE*stream)	\n'문자를 만날 때까지 문자열을 읽어들인다. 문자열 뒤에 NULL문자가 삽입된다.
filelength	io.h	long filelength(int handle)	handle이 지정하는 파일의 길이를 조사한다.
fileno	stdio.h	int flieno(FILE*stream)	스트림의 파일 핸들을 조사한다.
fillellipse	graphics.h	void far fillellipse(int x, int y, int xradius, int yradius)	중심(x, y)에서 x축 y축 반지름을 개별적으로 지정해 타원을 그리며 내부를 채운다.
fillpoly	graphics.h	void far fillpoly(int numpoints, int far*polypoints)	drawpoly와 유사한 작용을 하며 numpoints가 지정하는 만큼의 다각형을 그린다.
findfirst	dir.h	int findfirst(const char*pathname, struct ftblk *ftblk, int attrib)	와일드 카드로 주어진 조건을 만족하는 첫 번째 파일을 찾는다.
findnext	dir.h	int findnext(struct ftblk*ftblk)	findfirst가 최초 검색하여 설정한 ftblk 구조체의 정보를 이용하여 검색을 계속 수행해 나간다.
floodfill	graphics.h	void far floodfill(int x, int y, int border)	닫혀져 있는 다각형의 내부를 채운다.
floor	math.h	double floor(double x)	인수 x를 내림한다. 인수 x의 수직선상에 좌측으로 가장 가까운 정수를 찾아내는 함수이다.
flushall	stdio.h	int flushall(void)	현재 개방된 모든 스트림에 할당되어 있는 버퍼를 비운다.
fmod	math.h	double fmod(double x, double y)	실수 x를 실수 y로 나눈 나머지를 구한다.
fnmerge	dir.h	void fnmerge(char *path, const char *drive, const char *dir, const char *name, const char *ext)	경로를 이루는 각각의 요소를 합쳐 하나의 완전한 경로를 만든다.
fnsplit	dir.h	int fnsplit(const char *path, char *drive, char *dir, char *name, char *ext)	하나의 완전한 경로를 각각의 요소로 분리시킨다.
fopen	stdio.h	FILE *fopen(const char *filename, const char *mode)	스트림을 개방하고 FILE형 구조체를 만들어 정보를 기입한 후 포인터를 리턴한다.
FP_OFF	dos.h	unsigned FP_OFF(farpointer)	farpointer에서 오프셋 값만 분리해낸다.
fprintf	stdio.h	int fpointf(FILR *stream, const char *format, ...)	스트림으로 서식화된 출력을 내보낸다. printf와 유사하다.
FP_SEG	dos.h	unsigned FP_SEG(farpointer)	farpointer에서 세그멘트 값만 분리해낸다.
fputc	stdio.h	int fputc(int c, FILE *stream)	한 문자를 출력한다.
fputchar	stdio.h	int fputchar(int c)	문자 c를 화면에 출력한다. fputc와 같다.
fputs	stdio.h	int fputs(const char *s, FILE *stream)	문자열을 스트림으로 출력한다.
fread	stdio.h	size_t fread(void *ptr, size_t size, size_t n, FILE *stream)	스트림으로부터 길이가 size인 데이터 n개를 지정된 메모리로 읽어들인다.
free	alloc.h, stdlib.h	void free(void*block)	malloc, calloc, realloc 등에 의해 할당된 메모리를 해제한다.
freemem	dos.h	int freemem(unsigned segx)	alloc 호출로 할당된 메모리 블록을 해제한다.
freopen	stdio.h	FILE *freopen(const char *filename, const char *mode, FILE *stream)	개방되어 있는 스트림을 filename으로 대체한다.
frexp	math.h	double frexp(double x, int *exponent)	상용로그 log a의 가수값을 계산한다.
fscanf	stdio.h	int fscanf(FILE *stream, const char *format, ...)	스트림으로부터 서식화된 입력을 행한다. scanf와 유사하다.
fseek	stdio.h	int fseek(FILE *stream, long int offset, int whence)	스트림의 파일 포인터를 새롭게 설정한다.
fsetpos	stdio.h	int fsetpos(FILE *stream, const fpos_t *pos)	현재의 파일 포인터를 새롭게 설정한다.
fstat	sys/stat.h	int fstat(int handle, struct stat *statbuf)	오픈되어 있는 파일의 정보를 statbuf에 저장한다.
ftell	stdio.h	int ftell(FILE *stream)	스트림의 현재 파일 포인터를 조사한다.
ftime	sys/timeb.h	void ftime(struct timeb *buf)	현재 시간을 timeb 구조체에 저장한다.
fwrite	stdio.h	size_t fwrite(const void *ptr, size_t size, size_t n, FILE *stream)	스트림으로 포인터에 들어있는 데이터를 size*n바이트만큼 출력한다.
gcvt	stdio.h	char *gcvt(double value, int ndec, char *buf)	실수형 수치를 ndec자리수까지 문자열로 바꿔 buf에 저장한다.
geninterrupt	dos.h	void geninterrupt(int intr_num)	intr_num이 지시하는 소프트웨어 인터럽트를 실행시킨다.
getarccoords	graphics.h	void far getarccoords(struct arccoordstypr far *arccoords)	마지막 arc 호출에 관한 정보를 arccoords가 가리키는 구조체에 저장한다.
getaspectratio	graphics.h	void far getaspectratio(int far *xasp, int far *yasp)	원의 종횡비를 조사한다.
getbkcolor	graphics.h	int far getbkcolor(void)	현재 배경색을 조사한다.
getc	stdio.h	int getc(FILE *stream)	스트림에서 한 문자를 읽어온 뒤 파일 포인터를 1 증가시킨다.
getcbrk	dos.h	int getcbrk(void)	Ctrl-Break 체크 상태를 조사한다.
getch	conio.h	int getch(void)	키보드에서 문자 하나를 입력받는다.
getchar	stdio.h	int getchar(void)	키보드에서 문자 하나를 입력받는다.
getche	conio.h	int getche(void)	키보드에서 문자 하나를 입력받는다.
getcolor	graphics.h	int far getcolor(void)	현재 설정된 전경색을 리턴한다.
getcurdir	dir.h	int getcurdir(int drive, char *directory)	지정된 드라이브의 디렉토리를 조사해 인수 dir가 지정하는 메모리에 저장한다.
getcwd	dir.h	char *getcwd(char *buf, int buflen)	현재 작업중인 디렉토리를 조사해 buf에 저장한다.
getdate	dos.h	void getdate(struct date *datep)	현재 날짜를 확인한다.
getdefaultpalette	graphics.h	struct palettestype *far getdefaultpalette(void)	그래픽 시스템을 초기화할 때의 팔레트 타입 구조체를 찾는다.
getdfree	dos.h	void getdfree(unsigned char drive, struct dfree *dtable)	디스크의 공간 정보를 제공해준다.
getdisk	dir.h	int getdisk(void)	현재 드라이브의 번호를 조사한다.
getdrivername	graphics.h	char far *getdrivername(void)	그래픽 모드를 초기화할 때 어떤 BGI 드라이버가 로드되었는지 조사한다.
getdta	dos.h	char far *getdta(void)	디스크 전송 주소의 현재 설정 상태를 조사한다.
getenv	stdlib.h	char *getenv(const char *name)	환경변수를 조사해서 조사한 문자열을 얻는다.
getfat	dos.h	void getfat(unsigned char drive, struct fatinfo *dtable)	드라이브의 FAT정보를 가져와 dtable 구조체에 저장한다.
getfatd	dos.h	void getfatd(struct fatinfo *dtable)	드라이브의 FAT정보를 가져와 dtable 구조체에 저장한다.
getfillpattern	graphics.h	void far getfillpattern(char far *pattern)	사용자 정의 채색 무늬를 읽어와 메모리 영역에 복사한다.
getfillsettings	graphics.h	void far getfillsettings(struct fillsettingstype far *fillinfo)	지정된 채색 무늬와 색상을 조사한다.
getftime	io.h	int getftime(int handle, struct ftime *ftimep)	파일의 시간과 날짜에 관한 정보를 조사한다.
getgraphmode	graphics.h	int far getgraphmodel(void)	현재 선택된 그래픽 모드를 조사한다.
getimage	graphics.h	void far getimage(int left, int top, int right, int bottom, void far *bitmap)	지정된 영역의 이미지를 지정된 메모리 번지로 복사한다.
getlinesettings	graphics.h	void far getlinesettings(struct linesettingstype far *lineinfo)	지정된 선의 모양과 굵기를 조사한다.
getmaxcolor	graphics.h	int far getmaxcolor(void)	현재 사용할 수 있는 색상의 최고 번호를 계산해준다.
getmaxmode	graphics.h	int far getmaxmode(void)	현재 그래픽 드라이버의 최대 모드값을 조사한다.
getmaxx	graphics.h	int far getmaxx(void)	현재 그래픽 드라이브와 모드에서 최대 X좌표를 알아낸다.
getmaxy	graphics.h	int far getmaxy(void)	현재 그래픽 드라이브와 모드에서 최대 Y좌표를 알아낸다.
getmodename	graphics.h	char *getmodename(int mode_number)	현재 그래픽 모드의 이름을 조사한다.
getmoderange	graphics.h	void far getmoderange(int graphdriver, int far *lomode, int far *himode)	그래픽 드라이버의 가장 낮은 모드와 가장 높은 모드를 조사한다.
getpalette	graphics.h	void far getpalette(struct palettetype far *palette)	설정된 팔레트의 크기와 색상 정보를 조사해 팔레트 구조체에 저장한다.
getpalettesize	graphics.h	void far getpalettesize(void)	그래픽 드라이버와 모드에서 사용 가능한 팔레트의 최대 개수를 알려준다.
getpass	conio.h	char *getpass(const char *prompt)	문자열을 패스워드 형식으로 입력받는다.
getpid	process.h	unsigned getpid(void)	각 프로그램의 프로세서 ID를 조사한다.
getpixel	graphics.h	unsigned far getpixel(int x, int y)	특정 좌표의 색상을 조사한다.
getpsp	dos.h	unsigned getpsp(void)	psp의 세그먼트 주소를 조사한다.
gets	stdio.h	char *gets(char *s)	문자열을 입력받아 s에 저장한다.
gettext	conio.h	int gettext(int left, int top, int right, int bottom, void *destin)	지정 영역의 문자들을 지정된 메모리 영역에 저장한다.
gettextinfo	conio.h	void gettextinfo(struct text_info *r)	텍스트 모드에 관한 정보를 읽어 구조체에 저장한다.
gettextsettings	graphics.h	void far gettextsettings(struct textsettingstype far *texttypeinfo)	settextstyle 등의 함수에 의해 설정된 값을 읽어온다.
gettime	dos.h	void gettime(struct time *timep)	시간을 읽어와 구조체에 저장한다.
getvect	dos.h	void interrupt(*getvect(int interruptno))()	지정된 인터럽트의 시작 번지를 리턴한다.
getverify	dos.h	int getverify(void)	도스의 verify flag 상태를 조사한다.
getviewsettings	graphics.h	void far getviewsettings(struct viewporttype far *viewport)	설정된 뷰포트에 대한 정보를 조사한다.
getw	stdio.h	int getw(FILE *stream)	스트림으로부터 정수 2바이트를 읽어온다.
getx	graphics.h	int far getx(void)	현재 화면 내의 현 위치의 X좌표를 읽어온다.
gety	graphics.h	int far gety(void)	현재 화면 내의 현 위치의 Y좌표를 읽어온다.
gmtime	time.h	struct tm *gmtime(const time _t *time)	time 함수로 구한 시간을 GMT 표준 시각으로 변환해준다.
gotoxy	conio.h	void gotoxy(int x, int y)	커서의 위치를 (x, y)로 이동시킨다.
graphdefaults	graphics.h	void far graphdefaults(void)	모든 그래픽 세팅을 초기화시킨다.
grapherrormsg	graphics.h	char far *grapherrormsg(int errorcode)	에러 메시지 문자열의 포인터를 구한다.
graphresult	graphics.h	int far graphresult(void)	마지막 그래픽 동작이 실패했을 때의 에러값을 조사한다.
harderr	dos.h	void harderr(int(*handler)())	치명적 에러 처리 함수를 지정한다.
hardresume	dos.h	void hardresume(int axret)	도스로 0~2의 값을 가지고 복귀한다.
hardretn	dos.h	void hardretn(int retn)	에러를 유발한 프로그램으로 복귀한다.
heapcheck	alloc.h	int heapcheck(void)	힙을 검사하고 내부 속성을 점검한다.
heapcheckfree	alloc.h	int heapcheckfree(unsigned int fillvalue)	힘에 남아 있는 자유 영역이 주어진 값을 갖고 있는지 조사한다.
heapchecknode	alloc.h	int heapchecknode(void *node)	주어진 메모리 블록을 점검하여 현재 상태를 검사한다.
heapfillfree	alloc.h	int heapfillfree(unsigned int fillvalue)	힙에 남아 있는 사용가능한 자유영역을 주어진 값으로 채운다.
heapwalk	alloc.h	int heapwalk(struct heapinfo *hi)	힙에 할당된 메모리 블록들을 순회하며 상태를 조사한다.
highvideo	conio.h	void highvideo(void)	현재 문자의 속성을 고휘도 문자로 설정한다.
hypot	math.h	double hypot(double x, double y)	직각 삼각형의 빗변을 계산한다.
imag	complex.h	double imag(double x)	복소수의 허수부를 계산한다.
imagesize	graphics.h	void far imagesize(int left, int top, int right, int bottom)	이미지를 저장하기 위해 필요한 메모리의 크기를 구한다.
initgraph	graphics.h	void far initgraph(int far *graphdriver, int far *graphmode, char far *pathtoname)	그래픽 드라이버를 로드하고 그래픽 모드 및 설정을 초기화한다.
inport	dos.h	int inport(int portid)	portid 포트에서 2바이트를 입력받는다.
inportb	dos.h	unsigned char inportb(int portid)	portid 포트에서 1바이트를 입력받는다.
insline	conio.h	void insline(void)	현재 커서의 위치에 공백 한 줄을 삽입한다.
installuserdriver	graphics.h	int far installuserdriver(char far *name, int huge(*detect)(void))	새로운 BGI 드라이버를 설치한다.
installuserfont	graphics.h	int far installuserfont(char far *name)	BGI 시스템에 들어 있지 않은 폰트를 읽어와서 설치한다.
int86	dos.h	int int86(int intno, union REGS *inregs, union REGS *outregs)	인터럽트를 호출한다.
int86x	dos.h	int int86x*int intno, union REGS *inregs, union REGS *outregs, struct SREGS *segregs)	int86함수에 더해 세그먼트 레지스터도 전달해준다.
intdos	dos.h	int intdos(union REGS *inregs, union REGS *outregs)	0x21번 인터럽트를 호출한다.
intdosx	dos.h	int intdosx(union REGS *inregs, union REGS *outregs, struct SREGS *segregs)	0x21번 인터럽트를 호출하되 세그먼트 레지스터값을 인수로 전달한다.
intr	dos.h	void intr(int intno, struct REGPACK *preg)	소프트웨어 인터럽트를 호출한다.
ioctl	io.h	int ioctl(int handle, int func[, void *argdx, int argcx])	디스크, 직병렬 포트에 대한 직접적인 IO서비스를 제공한다.
isalnum	ctype.h	int isalnum(int c)	c가 알파벳인지 숫자인지 조사해준다.
isalpha	ctype.h	int isalpha(int c)	c가 알파벳인지 조사해준다.
isascii	ctype.h	int isascii(int c)	c가 아스키문자인지 조사해준다.
isatty	io.h	int isatty(int handle)	인수로 주어진 핸들이 다음과 같은 종류의 문자 입출력용 장치와 연결되어 있는가를 조사한다.
iscntrl	ctype.h	int iscntrl(int c)	이 함수는 c가 제어 문자인 경우를 조사해 준다. 
isdigit	ctype.h	int isdigit(int c)	c가 숫자인지 조사해 준다. 즉 c가 0~9 사이의 문자이면 참을 리턴한다.
isgraph	ctype.h	int isgraph(int c)	문자 c가 출력 가능한 문자인가를 검사한다.
islower	ctype.h	int islower(int c)	문자 c가 소문자인지 검사해준다.
isprint	ctype.h	int isprint(int c)	c가 프린트 가능한 문자인지 조사해준다.
ispunct	ctype.h	int ispunct(int c)	문자 c가 구두점인지 판별해 준다.
isspace	ctype.h	int isspace(int c)	문자 c가 공백 문자인지를 검사해 준다.
isupper	ctype.h	int isupper(int c)	문자 c가 대문자인지 검사해 준다.
isxdigit	ctype.h	int isxdigit(int c)	문자 c가 16진수 표현에 사용되는 문자인지 조사해 준다.
itoa	stdlib.h	char* itoa(int value, char* string, int radix)	정수를 문자열로 바꾼다.
kbhit	conio.h	int kbhit(void)	키보드로부터 입력된 키가 있는지 조사한다.
keep	dos.h	void keep(unsigned char status, unsigned size)	프로그램을 메모리에 남겨둔 채 도스로 복귀한다.
labs	math.h	long int labs(long int x)	long형 정수의 절대값을 계산한다.
ldexp	math.h	double ldexp(double x, int exp)	x*2exp를 계산한다. X*pow(2, exp)와 동일한 결과를 내는 함수
ldiv	stdlib h	ldiv_t ldiv(long int number, long int denom)	두 long형 정수로 나눗셈을 하고 그 몫과 나머지를 stdlib.h에 정의된 div_t 구조체로 리턴한다.
lfind	stdlib.h	void lfind(const void* key, const void* base, size_t nelem, size_t width, int (*fcmp)(const void*, const void*))	선형 탐색을 수행하여 테이블에서 키값을 찾아낸다.
line	graphics.h	void line(int x1, int y1, int x2, int y2)	(x1, y1) 좌표에서 (x2, y2)까지 선을 그린다.
linerel	graphics.h	void linerel(int dx, int dy)	현재 CP에서 상대적 좌표값으로 이동한다.
lineto	graphics.h	void lineto(int x, int y)	CP로부터 (x, y) 위치로 선을 긋는다.
localeconv	locale.h	struct* localeconv(void)	국가마다 다른 화폐기호나 날짜 형식을 지정하는 locale 구조체를 조사한다.
localtime	time.h	struct tm* localtime(const time_t* timer)	time 함수에 의해 구해진 시간을 tm 구조체에 저장하며 이때 저장되는 시간은 적당히 조정된 시간.
lock	io.h	int lock(int handle, long offset, long length)	도스 3.x의 파일 공유 기법 인터페이스를 제공한다.
log	math.h	double log(double x)	x의 자연로그를 계산한다.
log10	math.h	double log10(double x)	x의 상용로그를 계산한다.
longjmp	setmp.h	void longjmp(jmp_buf jmpb, int retval)	마지막으로 호출된 setjmp가 jmpb에 저장해 둔 작업 상태를 복구시키며 setjmp가 retval을 리턴한 곳으로 돌아간다.
lowvideo	conio.h	void lowvideo(void)	현재 문자의 속성을 낮은 휘도의 문자 속성으로 설정한다.
_lrotl	stdlib.h	unsigned long _lrotl(unsigned long val, int count)	value값을 왼쪽으로 count만큼 회전시킨다.
_lrotr	stdlib.h	unsinged long _lrotr(unsigned long val, int count)	value 값을 오른쪽으로 count만큼 회전시킨다.
lsearch	stdlib.h	void lsearch(const void* key, const void* base, size_t nelem, size_t width, int (*fcmp)(const void*, const void*))	선형 탐색을 수행하여 테이블상에 키 항목이 최초로 발견된 번지를 리턴하되 발견되지 않을 경우 키 항목을 테이블에 첨가한다.
lseek	io.h	long lseek(int handle, long offset, int fromwhere)	파일 포인터(FP)를 새롭게 설정한다.
ltoa	stdlib.h	char* ltoa(long value, char* string, int radix)	long형 정수를 문자열로 바꾼다.
malloc	alloc.h, stdlib.h	void* malloc(size_t size)	동적으로 메모리를 할당한다. 이때 할당되는 메모리는 heap이다.
_matherrl	math.h	int _matherrl(struct _exception* (e))	matherr함수와 기능이 같으며 차이점은 이 함수는 long double형을 계산하고 구조체가 다른 점이다.
matherr	math.h	int matherr(struct exception* e)	matherr함수는 수학 라이브러리 함수 실행 중 에러가 발생했을 경우 호출되는 함수이다.
max	stdlib.h	(type) max(a, b)	두 값 중 큰 값을 리턴한다.
memchr	stinrg.h, math.h	void* memchr(const void* s, int c,  size_t n)	s가 포인트하는 메모리부터 n바이트 내의 메모리 블록까지에서 문자 c를 찾는다.
memcmp	memory.h	int memcmp(const void* sl, const void* s2, size_t n)	두 개의 메모리 블록을 비교한다. 이때 비교되는 값들은 부호 없는 값으로 처리된다.
memcpy	memory.h	void* memcpy(void* deset, const void* src, size_t n)	메모리끼리 복사한다. Src번지에 있는 데이터를 dest가 지정하는 번지로 n바이트만큼 복사한다.
memicmp	memory.h	int memicmp(const void* sl, const void* s2, size_t n)	두 개의 메모리 블록을 비교한다. 이때 비교되는 값들은 부호 없는 값으로 처리된다.
memmove	string.h, memory.h	void* memmove(void* dest, const void* src, size_t n)	메모리끼리 복사한다. Src번지에 있는 데이터를 dest가 지정하는 번지로 n바이트만큼 복사한다.
memset	memory.h	void* memset(void* s, int c, size_t n)	s가 포인트하는 메모리를 값 c로 n개를 채운다.
min	stdlib.h	(type) min(a,b)	두 값 중 작은 값을 리턴한다.
mkdir	dir.h	int mkdir(const char* path)	새로운 디렉토리를 인수로 주어진 패스로 생성한다. 도스의 md명령어와 사용법이 동일하다.
MK_FP	dos.h	void* MK_FP(unsinged seg, unsigned ofs)	주어진 오프셋과 세그먼트를 사용하여 far 포인터를 생성한다.
mktemp	dir.h	char* mktemp(char* template)	임시 파일로 사용할 수 있는 파일의 이름을 만든다.
modf	math.h	double modf(double x, double* ipart)	실수 x를 분해하여 정수부와 실수부로 나눈다.
movedata	memory.h	void movedata(unsinged srcseg, unsigned srcoff, unsinged dstseg, unsinged dstoff, size_t n)	movedata는 src에서 dest로 n바이트를 복사한다.
moverel	graphics.h	void moverel(int x, int y)	현재 CP에서 상대적 좌표값으로 이동한다.
movetext	conio.h	int movetext(int left, int top, int right, int bottom, int destleft, int desttop)	화면상의 지정한 사각 영역에 있는 문자들을 다른 영역을 복사한다.
moveto	graphics.h	void moveto(int x, int y)	현재 CP를 (x, y) 위치로 이동 시킨다. 선을 그리지 않고 이동한다.
movmem	memory.h	void movmem(void* src, void* dest, unsinged length)	src에서 dest로 length만큼 복사를 한다.
norm	complex.h	double norm(complex x)	복소수의 절대값을 구한 후 제곱한 값을 구한다.
normvideo	conio.h	void normvideo(void)	현재 문자의 속성을 프로그램 실행 이전의 문자속성으로 되돌린다.
nosound	dos.h	void nosound(void)	PC 스피커의 소리를 끈다.
_open	io.h	int _open(const char* filename, int oflags)	핸들형 파일 입출력을 위해 파일을 개방한다.
open	io.h	open(const char* path, int access [, unsigned model])	path로 지정된 파일을 연다.
outport	dos.h	void outport(int portid, int value)	portid 포트로 2바이트를 출력한다.
outportb	dos.h	void outport(int portid, unsigned char value)	portid 포트로 1바이트를 출력한다.
outtext	graphics.h	void outtext(char* textstring)	그래픽 모드에서 문자열을 출력할 때 쓰인다.
outtextxy	graphics.h	void outtextxy(int x, int y, char* textstring)	그래픽 모드에서 문자열을 출력한다.
parsfnm	dos.h	char* parsfnm(const char* cmdline, struct* fcb, int opt)	인수로 주어진 cmdline에 있는 파일 이름을 분석하여 FCB에 드라이브명, 파일명, 확장명을 기입한다.
peek	dos.h	int peek(unsigned segment, unsigned offset)	segment, offset이 지정하는 번지의 값을 조사한다.
peekb	dos.h	int peekb(unsinged segment, unsinged offset)	segment, offset이 지정하는 번지의 값을 조사한다. 이때 조사되는 값은 8비트 즉 문자값이다.
perror	stdio.h	void perror(const char* s)	시스템 에러 메시지를 stderr으로 출력한다.
pieslice	graphics.h	void pieslice(int x, int y, int stangle, int endangle, int radius)	중심(x, y)에서 시작각(stangle), 끝각(endangle)을 지정하여 반지름의 원호를 그리고 원호의 양끝점과 중심을 연결해 내부를 채색한다.
poke	dos.h	void poke(unsinged segment, unsigned offset, int value)	segment, offset이 지정하는 메모리 번지에 16비트의 정수값을 기입해 넣는다.
pokeb	dos.h	void pokeb(unsinged segment, unsigned offset, char value)	segment, offset이 지정하는 메모리 번지에 8비트의 문자값을 기입해 넣는다.
polar	complex.h	complex polar(double mag, double angle)	주어진 크기와 각도를 가진 복소수를 만든다.
poly	math.h	double poly(double x, int degree, double coeffs[]	다항식을 계산한다.
pow	math.h	double pow(double x, double y)	x의 y승, 즉 xy을 계산한다.
pow10	math.h	double pow10(int p)	10p을 구한다.
printf	stdio.h	int printf(const char* format, [argument, …])	stdout에 형식화된 출력을 한다.
putc	stdio.h	int putc(int c, FILE* stream)	스트림으로 문자 c를 출력한다.
putch	conio.h	int putch(int c)	화면에 문자 c를 출력한다.
putchar	stdio.h	int putchar(int c)	화면에 문자 c를 출력한다.
putenv	stdlib.h	int putenv(const char* path)	도스의 환경 변수 영역에 새로운 환경 변수를 첨가한다.
putimage	graphics.h	void putimage(int left, int top, void* bitmap, int op)	화면에 이미지를 출력한다.
putpixel	graphics.h	void putpixel(int x, int y, int color)	(x, y) 좌표에 color색상으로 점을 찍는다.
puts	stdio.h	int puts(const char* s)	문자열을 화면으로 출력한다.
puttext	conio.h	int puttext(int left, int top, int right, int bottom, void* source)	source가 포인트하는 메모리 영역에 저장되어 있는 문자들을 지시하는 화면상의 사각 영역에 출력한다.
putw	stdio.h	int putw(int w, FILE* stream)	스트림에 정수 w를 출력한다.
qsort	stdlib.h	void qsort(void* base, size_t nelem, size_t width, int (*fcmp)(const void*, const void*))	세 개의 값 중 중앙값을 찾는 quick sort 앨거리듬을 사용하여 정렬을 수행한다.
raise	signal.h	int raise(int sig)	프로그램으로 신호를 강제적으로 보낸다.
rand	stdlib.h	int rand(void)	예측할 수 없는 하나의 수를 만들어 낸다.
randbrd	dos.h	int randbrd(struct fcb* fcb, int rcnt)	FCB를 사용하여 현재 디스크의 DTA 영역으로 record를 인수 rcnt가 지정하는 개수만큼 읽어들인다.
randbwr	dos.h	int randbwr(struct fcb* fcb, int rcnt)	FCB를 사용하여 디스크 상에 인수 rcnt가 지정하는 개수만큼의 record를 기록한다.
random	stdlib.h	int random(int num)	0~num-1사이의 정수 난수를 발생시킨다.
randomize	stdlib.h, time.h	void randomize(void)	난수 발생기의 시작점을 초기화시켜 준다.
real	complex.h	double real(double x)	복소수의 실수부만을 구한다.
realloc	alloc.h	void* realloc(void* block, size_t size)	이미 할당되어 있는 메모리의 크기를 축소시키거나 확장시킨다.
rectangle	graphics.h	void rectangle(int left, int top, int right, int bottom)	사각형을 그린다.
registerbgidriver	graphics.h	int registerbgidriver(void(*driver)(void))	BGI드라이버 파일을 읽어와서 등록시킨다.
registerbgifont	graphics.h	int registerbgifont(void(*font)(void))	BGI 폰트를 읽어와서 등록시킨다.
remove	stdio.h	int remove(const char* filename)	파일을 삭제한다.
rename	stdio.h	int rename(const char* oldname, const char* newname)	파일의 이름을 바꾼다.
restorecrtmode	graphics.h	void restorecrtmode(void)	initgraph 호출 전의 비디오 모드, 즉 텍스트 모드로 복귀한다.
rewind	stdio.h	void rewind(FILE* stream)	스트림의 파일 포인터(FP)를 파일의 시작점으로 옮긴다.
rmdir	dir.h	int rmdir(const char* path)	path 인수가 지정하는 디렉토리를 제거한다.
sbrk	alloc.h	void* sbrk(int incr)	이 함수를 호출한 프로그램의 heap크기를 바꾼다.
scanf	stdio.h	int scanf(const char* format [, address …])	형식화된 입력을 키보드로부터 받는다.
searchpath	dir.h	char* searchpath(const char* file)	인수로 주어진 file이 있는 디렉토리를 조사해준다.
sector	graphics.h	void sector(int x, int y, int stangle, int endangle, int xradius, int yradius)	중심(x, y)에서 시작각(stangle), 끝각(endangle)을 지정하여 반지름의 타원호를 그린다.
segread	dos.h	void segread(struct SREGS* segp)	세그먼트 레지스터의 현재값을 조사하여 segp 구조체에 저장한다.
setactivepage	graphics.h	void setactivepage(int page)	active page를 설정한다.
setallpalette	graphics.h	void setallpalette(struct palettetype *palette)	setallpalette는 팔레트 포인터가 가리키는 palettetype의 구조체에 들어 있는 값으로 현재 팔레트를 변경한다
setaspectratio	graphics.h	void setaspectratio(int xasp, int yasp)	그래픽 시스템의 원종횡비(aspect ratio)를 맞추어 준다.
setbkcolor	graphics.h	void setbkcolor(int color)	현재의 배경색을 color로 설정한다. Color는 다음 표에서와 같은 색상을 의미한다.
setblock	dos.h	int setblock(unsigned segx, unsigned newsize)	이전에 할당된 블록의 크기를 변경시킨다.
setbuf	stdio.h	void setbuf(FILE *stream, char *buf)	스트림이 오픈될 때 버퍼가 자동으로 512바이트 크기로 할당되며 close 할 때 할당된 버퍼는 자동으로 해제된다.
setcbrk	dos.h	int setcbrk(int cbrkvalue)	Crtl-Break에 대한 체크 상태를 설정한다.
setcolor	graphics.h	void setcolor(int color)	현재의 전경색을 지정한다. 지정 가능한 색상의 수는 0~getmaxcolor() 사이의 정수이다.
_setcursortype	conio.h	void_setcursortype(int cur_t)	커서의 모양을 바꾼다.
setdate	dos.h	void setdate(struct date *datep)	datep 구조체를 참조해 시스템의 날짜를 세팅한다.
setdisk	dir.h	int setdish(int drive)	드라이브를 변경시킨다.
setdta	dos.h	void setdta(char *dta)	인수로 주어진 dta로 현재 디스크 전송 주소를 변경시킨다.
setfillpattern	graphics.h	void setfillpattern(char *upattern, int color)	사용자가 지정한 무늬와 색상으로 채움 무늬를 설정한다.
setfillstyle	graphics.h	void setfillstyle(int parttern, int color)	채색 무늬와 색상을 지정한다.
setftime	io.h	int setftime(int handle, struct ftime *ftimep)	오픈된 파일의 시간과 날짜를 ftime형 구조체가 가리키는 시간과 날짜로 설정한다.
setgraphbufsize	graphics.h	unsigned setgraphbufsize(unsigned bufsize)	initgraph가 그래픽 시스템을 초기화할때 얼마간의 버퍼를 할당해 두고 closegraph는 이 버퍼를 할당해제한다.
setgraphmode	graphics.h	void setgraphmode(int mode)	그래픽 모드를 설정한다.
setjmp	setjmp.h	int setjmp(jmp_bufjmpb)	비지역적 jump를 위한 준비를 하며 현재의 모든 작업 상태를 jmpb에 저장해 둔 후 0을 리턴한다.
setlinestyle	graphics.h	void setlinestyle(int linestyle, unsigned upattern, int thickness)	선의 굵기와 모양을 지정한다.
setlocale	locale.h	char *setlocale(int category, char *locale)	국가마다 다른 화폐기호나 날짜 형식을 지정하는 locale 구조체를 설정한다.
setmem	mem.h	void setmem(void *dest, unsigned length, char value)	dest에서 시작되고 length의 길이를 가지는 메모리의 일정영역을 value 값으로 모두 채운다.
setmode	io.h	int setmode(int handle, int amode)	오픈된 파일의 액세스 모드를 설정한다.
setpalette	graphics.h	void setpalette(int colornum, int color)	colornum이 지정하는 팔레트의 색상을 color로 바꾼다.
setrgbpalette	graphics.h	void setrgbpalette(int colornum, int red, int green, int blue)	IBM 8514드라이버와 VGA에서 사용하는 팔레트 setting 함수로 RGB 삼원색의 조합으로 색상을 지정할 수 있다.
settextjustify	graphics.h	void settextjustify(int horiz, int vert)	outtext, outtextxy 등에서 출력하는 문자열의 좌표 정렬 방식을 지정한다.
settextstyle	graphics.h	void settextstyle(int font, int dirction, int charsize)	outtext, outtextxy 함수에서 문자열 출력에 사용할 폰트, 크기 및 방향을 지정한다.
settime	dos.h	void settime(struct time *timep)	timep형 구조체에 지정되어 있는 시간 정보로 시스템의 시간을 설정한다.
setusercharsize	graphics.h	void setusercharsized(int multx, int divx, int multy, int divy)	글자 크기를 사용자 임의의 크기로 만든다.
setvbuf	stdio.h	int setvbuf(FILE *stream, char *buf, int type, size_t size)	스트림이 오픈될 때 버퍼는 자동으로 512바이트의 크기로 할당되어지며 close될 때 할당된 버퍼는 자동으로 해제된다.
setvect	dos.h	void setvect(int interruptno, void interrupt(*isr))	interruptno가 지정하는 인터럽트의 시작 번지를 두 번째 인수 isr의 번지로 설정한다.
setverify	dos.h	void setverify(int value)	도스의 verify flag 상태를 설정한다.
setviewport	graphics.h	void setviewport(int left, int top, int right, int bottom, int clip)	새로운 뷰포트를 지정한다.
setvisualpage	graphics.h	void setvisualpage(int page)	비주얼 페이지를 설정한다.
setwritemode	graphics.h	void setwritemode(int mode)	그래픽 출력 함수가 화면에 작도를 하는 방법을 설정한다.
signal	signal.h	void (*signal(int sig, void (*func)(int sig [, int subcode])))(int)	signal이란 예외 상황이 발생하거나 raise 함수가 호출될 때 프로그램으로 보내지는 신호를 말한다.
sin	math.h	double sin(double x)	삼각 함수 sin을 계산한다.
sinh	math.h	double sinh(double x)	쌍곡선 sinh 함수값을 계산한다.
sleep	dos.h	void sleep(unsigned seconds)	second 인수가 지정하는 만큼 초단위로 지연이 되며 지연시간은 아주 정확하다.
sopen	io.h	int sopen(char *path, int access, int shflags, int mode)	path가 지정하는 파일을 오픈하며 공유 파일을 읽고 쓸 준비를 한다.
sound	dos.h	void sound(unsigned frequency)	인수 frequency로 주어진 주파수로 pc의 스피커를 작동시킨다.
spawn	process.h	int spownl(int mode, char *path, char *arg0, … , NULL)	모 프로그램을 끝내지 않고 child 프로그램을 실행시킨다.
sprintf	stdio.h	int sprintf(char *buffer, const char *format, [,argument,…])	printf문과 마찬가지로 형식화된 출력을 한다.
sqrt	math.h	double sqrt(double x)	x의 양의 제곱근을 계산한다.
srand	stdlib.h	void srand(unsigned seed)	난수 발생기는 예측할 수 없는 수를 발생시키기는 하나 항상 발생되는 수가 일정하다.
sscanf	stdio.h	int sscanf(const char *buffer, const char *format, [,address…])	scanf의 기능과 유사하되 입력을 stdin로부터 직접 받지 않고 문자열에서 받는다.
stat	sys\stat.h	int stat (char *path, struct stat, *statbuf)	path가 지정하는 파일에 관한 정보를 조사하여 statbuf에 저장한다.
stime	time.h	int stime(time_t *tp)	시스템의 시간과 날짜를 한꺼번에 바꾸어 준다.
stpcpy	string.h	char *stpcpy(char *dest, const char *src)	문자열 src를 문자배열 dest로 복사한다.
strcat	string.h	char *strcat(char *dest, const char *src)	문자열끼리 연결한다.
strchr	string.h	char *strchar(const *s, int c)	문자 배열 s내에 문자 c가 있는지 검사하고 있을 경우 문자 c가 있는 번지를 리턴한다.
strcmp	string.h	int strcmp(const char *s1 , const char *s2)	두 개의 문자열을 대소 비교한다.
strcmpi	string.h	int strcmpi(const char *s1, const char *s2)	두 개의 문자열을 대소 비교한다. Strcmpi는 대문자와 소문자를 구분하지 않는다.
strcoll	string.h	int strcoll(char *s1, char *s2)	setlocale 함수에 의해 지정된 비교방식에 따라 두개의 문자열을 비교 한다.
strcpy	string.h	char *strcpy(char *dest, const char *src)	문자열 src를 문자 배열 dest로 복사한다.
strcspn	string.h	size_t strcspn(const char *s1, const char *s2)	문자열 s1 중에 문자열 s2에 들어 있지 않은 문자들이 연속해 있는 길이를 구한다.
strdup	string.h	char *strdup(const char*s)	새로운 메모리를 할당하고 문자열 s를 복사한 후 그 포인터를 리턴한다.
strerror	stdio.h	char *strerror(int errnum)	errnum에 해당하는 에러 메시지 문자열을 만든다.
stricmp	string.h	int stricmp(const char *s1, const char *s2)	두 개의 문자열을 대소 비교한다.
strlen	string.h	size_t strlen(const char*s)	문자열 s의 길이를 계산한다.
strlwr	string.h	char *strlwr(char*s)	문자열 s내에 대문자 (A~Z)를 소문자 (a~z)로 변경한다.
strncat	string.h	char *strncat(char *dest, const char*src, size_t maxlen)	문자열끼리 지정한 길이만큼 덧붙인다.
strncmp	string.h	int strncmpi(const char *s1, const char*s2, size_t maxlen)	두 개의 문자열을 대소 비교한다.
strncmpi	string.h	int strncmpi(const char *s1, const char *s2, size_t maxlen)	두 개의 문자
strncpy	string.h	char *strncpy(char*dest, char*src, size_t maxlen)	문자열을 정해진 길이만큼 복사한다.
strnicmp	string.h	int strnicmp(const char*s1, const char*s2, size_t maxlen)	두 개의 문자열을 대소 비교한다.
strset	string.h	char*strset(char *s, int ch)	문자열을 특정 문자로 채운다.
strpbrk	string.h	char *strpbrk(const char*s1, const char*s2)	문자열 s1내에 문자열 s2에 있는 문자 중의 하나라도 있는지 검사하고 있을 경우 그 포인터를 리턴한다.
strrchr	string.h	char *strrchr(const char*s, int c)	문자 배열 s내에 문자 c가 있는지 검사하고 있을 경우 문자 c가 있는 번지를 리턴한다.
strrev	string.h	char *strrev(char *s)	문자열의 순서를 바꾼다.
strspn	string.h	size_t strspn(const char *s1, const *s2)	문자열 s1 중에서 문자열 s2에 있는 문자들이 연속해 있는 길이를 구한다.
strstr	string.h	char *strstr(const char *s1, const char *s2)	문자열 s1 내에서 문자열 s2가 포함되어 있는지 검사하고 만약 있다면 부분 문자열(substring)의 포인터를 리턴한다.
strtod	stdlib.h	double strtod(const char *s, char ** endptr)	문자열을 double형 부동 소수점으로 바꾼다.
strtok	string.h	char *strtok(char *s1, char *s2)	문자열에서 token을 찾아낸다.
strtol	stdlib.h	longstrtol(const char *s, char **endptr, int radix)	문자열을 long형 정수로 변환한다.
strtoul	string.h	unsigned long strtoul(const char *s, char **endptr, int radix)	문자열을 부호없는 long 형 정수로 바꾼다.
strupr	string.h	char *strupr(char*s)	문자열 s내의 소문자 (a~z)를 대문자 (A~Z)로 변경한다.
swab	stdlib.h	void swab (char *from, char *to, int nbytes)	두 개의 string끼리 복사를 하되 이때 from 에 있는 문자열의 상, 하위 바이트를 서로 교체하여 to 문자열로 복사한다.
system	process.h	int system(const char *command)	도스의 프롬프트상에서 실행할 수 있는 도스 명령(dir, copy 등의 내부 명령), batch 파일, 그외 실행 파일들은 도스 명령 해석기를 읽어 와서 실행시킨다.
tan	math.h	double tan (double x)	삼각함수 tangent를 계산한다.
tanh	math.h	double tanh(double x)	쌍곡선 tanh 함수값을 계산한다.
tell	io.h	long tell(int handle)	현재 파일 포인터를 조사한다.
textattr	conio.h	void textattr(int newattr)	출력한 문자의 속성을 설정한다.
textbackground	conio.h	void textbackground(int newcolor)	문자의 배경색을 지정한다.
textcolor	conio.h	void textcolor(int newcolor)	텍스트 모드에 전경생, 즉 문자의 생상을 변경시킨다.
textheight	graphics.h	int textheight(char *textstring)	문자열의 높이를 구한다.
textmode	conio.h	void textmode(int newmode)	텍스트 모드를 다른 모드로 바꾼다.
textwidth	graphics.h	int textwidth(char far *string)	string 의 넓이를 픽셀 단위로 계산한다.
time	time.h	time_t time(time_t *timer)	현재 시간을 조사한다.
tmpfile	stdio.h	FILE *tmpfile(void)	임시 파일로 사용될 파일을 만드는데 임시 파일의 성격상 이진 파일 모드와 쓰기 모드로 파일을 만든다.
tmpnam	stdio.h	char *tmpnam(char *sptr)	임시 파일로 사용할 수 있는 파일 이름을 만든다.
toascii	ctype.h	int toascii(int c)	c의 제7비트를 0으로 만들어 아스키 문자로 바꾸어 준다.
tolower	ctype.h	int tolower(int ch)	문자 ch가 A~Z사이의 문자일 경우 소문자 a~z로 바꾸어 준다.
toupper	ctype.h	int toupper(int ch)	문자 ch가 a~z사이의 문자일 경우 대문자 A~Z로 바꾸어 준다.
tzset	time.h	void tzset(void)	환경 변수 TZ에 기록되어 있는 전역 변수 timezone, daylight, tzname 을 새로운 값으로 설정한다.
ultoa	stdlib.h	char *ultoa(unsigned long value, char *string, int radix)	부호없는 long형 정수를 문자열로 바꾼다.
ungetc	stdio.h	int ungetc(int c, FILE *stream)	문자 c를 입력 스트림으로 다시 push한다.
ungetch	conio.h	int ungetch(int ch)	문자 ch를 키보드 버퍼로 push한다.
unixtodos	dos.h	void unixtodos(long time, struct date *d, struct dostime *t)	유닉스형의 날짜, 시간을 도스형으로 바꾸어 두 구조체에 세트한다.
unlink	io.h	int unlink(const char* filename)	파일을 삭제한다.
unlock	io.h	int unlock(int handle, long offset, long length)	lock 함수에 의해 설정된 lock을 제거한다.
wherex	conio.h	int wherex(void)	커서의 수평위치를 조사한다.
wherey	conio.h	int wherey(void)	커서의 수직 위치를 조사한다.
window	conio.h	void window(int left, int top, int right, int bottom)	텍스트 모드의 윈도우 영역을 정의한다.
write	io.h	int write(int handle, void *buf, unsigned len)	buf에 있는 데이터를 handle 이 지정하는 파일로 출력한다.